Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'
Description: "A fargate application with a CI/CD pipeline"

Outputs:
  GitHTTP:
    Description: CodeCommit clone URL for HTTPS
    Value: !GetAtt CodeRepository.CloneUrlHttp

  CodePipeline:
    Value: !Ref CodePipeline

  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub VPC-${ProjectID}

  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub PublicSubnet1-${ProjectID}

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub PublicSubnet2-${ProjectID}

  PublicAccess:
    Value: !GetAtt PublicAccessSecurityGroup.GroupId
    Export:
      Name: !Sub PublicAccess-${ProjectID}

  InternalAccess:
    Value: !GetAtt InternalSecurityGroup.GroupId
    Export:
      Name: !Sub InternalAccess-${ProjectID}

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic Configurations
        Parameters:
          - ProjectID
          - EdgeStackName
      - Label:
          default: Pipeline Configurations
        Parameters:
          - S3BucketName
          - DockerBuildImage
          - ApprovalEmail

Parameters:
  ProjectID:
    Type: String

  S3BucketName:
    Type: String

  EdgeStackName:
    Type: String

  DockerBuildImage:
    Type: String
    Default: "aws/codebuild/docker:17.09.0"
    Description: Docker Image used by CodeBuild

  ApprovalEmail:
    Type: String
    Description: Email address to which approval should be sent
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)"
    ConstraintDescription: Must be a valid email address. (e.g. name@example.com)

Globals:
  Function:
    Runtime: nodejs8.10
    MemorySize: 128
    Timeout: 30

Resources:

  # 成果物である Docker イメージを保持するリポジトリ
  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: fargate-handson/api
      LifecyclePolicy:
        LifecyclePolicyText: |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Only keep untagged images for 1 day",
                  "selection": {
                    "tagStatus": "untagged",
                    "countType": "sinceImagePushed",
                    "countNumber": 1,
                    "countUnit": "days"
                  },
                  "action": { "type": "expire" }
                }
              ]
            }

  # ソースコードを保持するためのリポジトリ
  CodeRepository:
   Type: AWS::CodeCommit::Repository
   Properties:
     RepositoryName: fargate-handson
     RepositoryDescription: Code repository for Fargate hands-on

  # パイプラインの完了通知や承認リンクを送信するための通知トピック
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref ApprovalEmail

  # 通知 Lambda の動作に必要な権限
  NotificationFuncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: allow-codepipeline-and-sns
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - sns:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

  # 通知 Lambda
  NotificationFunc:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: fargate-cicd-notification
      CodeUri: notification/
      Handler: index.handler
      Environment:
        Variables:
          TOPIC_ARN: !Ref Topic
      Role: !GetAtt NotificationFuncRole.Arn

  # アプリケーションのテストやビルドに必要な権限
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Policies:
        - PolicyName: code-build-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                Resource: !Sub arn:aws:s3:::${S3BucketName}/*
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${DockerRepository}
      Path: /

  # アプリケーションのテストやビルドの定義（開発環境）
  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref DockerBuildImage
        EnvironmentVariables:
          - Name: PROJECT_ID
            Value: !Ref ProjectID
          - Name: ENVIRONMENT_NAME
            Value: edge
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerRepository}
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: deploy/edge/buildspec.yml

  # 継続的インテグレーション/継続的デプロイのパイプラインに必要な権限
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codepipeline.amazonaws.com
      Policies:
        - PolicyName: code-pipeline-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - sns:Publish
                  - codecommit:ListRepositories
                  - lambda:List*
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: !Sub arn:aws:s3:::${S3BucketName}/*
              - Effect: Allow
                Action:
                  - codecommit:ListBranches
                  - codecommit:BatchGetRepositories
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codecommit:UploadArchive
                  - codecommit:CancelUploadArchive
                Resource:
                  - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeRepository.Name}
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuild}
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build/${CodeBuild}:*
              - Effect: Allow
                Action:
                  - lambda:*
                Resource:
                  - !GetAtt NotificationFunc.Arn
      Path: /

  # 継続的デプロイに必要な権限
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: cloudformation.amazonaws.com
      Policies:
        - PolicyName: code-pipeline-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:*
                  - ecs:RegisterTaskDefinition
                  - ecs:DeregisterTaskDefinition
                  # for stack update / deletion
                  - ecs:CreateService
                  - ecs:Delete*
                  - logs:Delete*
                  - cloudwatch:Delete*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /

  # 継続的インテグレーション/継続的デプロイのパイプライン（開発環境）
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3BucketName
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Provider: CodeCommit
                Owner: AWS
                Version: 1
              Configuration:
                RepositoryName: !GetAtt CodeRepository.Name
                BranchName: master
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Provider: CodeBuild
                Owner: AWS
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuild
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: Artifacts
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateEdgeChangeSet
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: 1
              Configuration:
                StackName: !Ref EdgeStackName
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: ChangeSet
                RoleArn: !GetAtt CloudFormationRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: SourceCode::deploy/cfn-master.yaml
                TemplateConfiguration: Artifacts::config.json
              InputArtifacts:
                - Name: SourceCode
                - Name: Artifacts
              OutputArtifacts:
                - Name: CreatedEdgeChangeSet
              RunOrder: 1
            - Name: ExecuteEdgeChangeSet
              ActionTypeId:
                Category: Deploy
                Provider: CloudFormation
                Owner: AWS
                Version: 1
              Configuration:
                StackName: !Ref EdgeStackName
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ChangeSet
              InputArtifacts:
                - Name: CreatedEdgeChangeSet
              OutputArtifacts:
                - Name: EdgeDeployed
              RunOrder: 2
            - Name: EdgeDeployedNotification
              ActionTypeId:
                Category: Invoke
                Provider: Lambda
                Owner: AWS
                Version: 1
              Configuration:
                FunctionName: !Ref NotificationFunc
                UserParameters: "{\"EnvName\":\"Edge\"}"
              InputArtifacts:
                - Name: EdgeDeployed
              OutputArtifacts:
                - Name: EdgeFinished
              RunOrder: 3
    DependsOn:
      - CodeBuild
      - CodePipelineServiceRole

  # アプリケーションのための VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Fargate Hands-on

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: 10.0.128.0/18
      Tags:
        - Key: Name
          Value: "Public Subnet 1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: 10.0.192.0/18
      Tags:
        - Key: Name
          Value: "Public Subnet 2"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: AttachGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # 一般公開からの接続用セキュリティグループ
  PublicAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for load balancers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: PublicAccess

  # VPC 内部からの接続用セキュリティグループ
  InternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for internal access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 10.1.0.0/16
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: InternalAccess

  InternalSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InternalSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref InternalSecurityGroup
